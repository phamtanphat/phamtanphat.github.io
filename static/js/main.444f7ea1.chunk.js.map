{"version":3,"sources":["components/redux/actioncreators.js","components/Word.js","components/Form.js","components/Filter.js","components/List.js","components/redux/store.js","components/redux/reducer/wordReducer.js","components/redux/reducer/shouldshowformRedcer.js","components/redux/reducer/filtermodeReducer.js","App.js","serviceWorker.js","index.js"],"names":["URL","toggleForm","type","set_filter_mode","filterMode","getAllWord","dispatch","axios","get","then","response","words","data","removeWord","_id","delete","word","Error","catch","error","alert","message","toggleWord","isMemorized","put","addWord","en","vn","post","Word","_this","this","props","react_default","a","createElement","className","onClick","Component","connect","actioncreators","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtEn","txtVn","bind","assertThisInitialized","setState","_this2","shouldShowForm","placeholder","value","onChange","evt","target","style","width","margin","borderRadius","Filter","List","components_Form","components_Filter","filter","w","map","components_Word","key","reducer","combineReducers","arguments","length","undefined","action","objectSpread","newWords","assign","unshift","store","createStore","applyMiddleware","thunk","App","es","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.444f7ea1.chunk.js","sourcesContent":["// phương thức sẽ tự gọi dispatch cho giá trị trả về\r\nimport axios from 'axios';\r\n\r\nconst URL = \"https://server01042019.herokuapp.com/word/\";\r\n\r\nexport function toggleForm(){\r\n    return {type : 'TOGGLE_FORM'}\r\n}\r\nexport function set_filter_mode(filterMode){\r\n    return {type : 'SET_FILTER_MODE' , filterMode}\r\n}\r\n\r\nexport function getAllWord(){\r\n    return function(dispatch){\r\n        const URL = \"https://server01042019.herokuapp.com/words\";\r\n        axios.get(URL)\r\n        .then(response => dispatch({type : 'SET_ALL_WORDS' , words : response.data.words}));\r\n    }\r\n}\r\n\r\nexport function removeWord(_id){\r\n    return function(dispatch){\r\n        axios.delete(URL + _id)\r\n        .then(response => {\r\n            if(!response.data.word) throw new Error(\"Can not remove word\");\r\n            dispatch({type : 'REMOVE_WORD' , _id : response.data.word._id})\r\n        })\r\n        .catch(error => alert(error.message));\r\n    }\r\n}\r\n\r\nexport function toggleWord(_id , isMemorized){\r\n    return function (dispatch){\r\n        axios.put(URL + _id ,{isMemorized})\r\n        .then(response => {\r\n            if(!response.data.word) throw new Error(\"Can not toggle word\");\r\n            dispatch({type : 'TOGGLE_WORD' , _id : response.data.word._id })\r\n        })\r\n        .catch(error => alert(error.message));\r\n    }\r\n}\r\n\r\n// \r\nexport function addWord(en , vn){\r\n    return function(dispatch){\r\n        axios.post(URL , {en,vn})\r\n        .then(response => {\r\n            if(!response.data.word) throw new Error(\"Can not add word\");\r\n            dispatch({type : 'ADD_WORD' , word : response.data.word })\r\n        })\r\n        .catch(error => alert(error.message));\r\n    }\r\n}","import React , {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from './redux/actioncreators';\r\n\r\nclass Word extends Component{\r\n    render(){\r\n        const word = this.props.word;\r\n        return(\r\n            <div className=\"word\" >\r\n                <div className=\"word-container\">\r\n                <h3 className=\"text-success\">{word.en}</h3>\r\n                <h3 className=\"text-danger\">\r\n                    {word.isMemorized ? '----' : word.vn}\r\n                </h3>\r\n                </div>\r\n                <div className=\"btn-container\">\r\n                <button\r\n                    onClick={() => this.props.toggleWord(word._id , !word.isMemorized)}\r\n                    className={word.isMemorized ? 'btn btn-success' : 'btn btn-danger'}>\r\n                    {word.isMemorized ? 'Forgot' : 'Memorized'}\r\n                </button>\r\n                <button \r\n                    onClick={() => this.props.removeWord(word._id)}\r\n                    className=\"btn btn-warning\" >\r\n                    Remove\r\n                </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,actioncreators)(Word);","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from './redux/actioncreators';\r\n\r\nclass Form extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            txtEn : '',\r\n            txtVn : ''\r\n        }\r\n        this.addWord = this.addWord.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n    }\r\n    addWord(){\r\n        this.props.addWord(this.state.txtEn , this.state.txtVn)\r\n        this.setState({txtEn : '' , txtVn : ''});\r\n    }\r\n    toggleForm(){\r\n        this.props.toggleForm();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            {\r\n                !this.props.shouldShowForm\r\n                ?\r\n                <div>\r\n                    <button \r\n                        onClick={this.toggleForm}\r\n                        className=\"btn btn-success\"\r\n                        style={{width : 200 , margin : 10 , borderRadius : 10 }}>\r\n                            +\r\n                    </button>\r\n                </div>\r\n                :\r\n                <div className=\"form-group word-from\" >\r\n                    <input\r\n                        placeholder=\"English\"\r\n                        className=\"form-control\"\r\n                        value={this.state.txtEn}\r\n                        onChange={evt => this.setState({txtEn : evt.target.value})}\r\n                        />\r\n                    <br />\r\n                    <input\r\n                        placeholder=\"Vietnamese\"\r\n                        className=\"form-control\"\r\n                        value={this.state.txtVn}\r\n                        onChange={evt => this.setState({txtVn : evt.target.value})}/>\r\n                    <br />\r\n                    <div className=\"btn-container\">\r\n                        <button \r\n                            onClick={this.addWord}\r\n                            className=\"btn btn-success\">\r\n                            Add word\r\n                        </button>\r\n                        <button\r\n                            onClick={this.toggleForm}\r\n                            className=\"btn btn-danger\">\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div> \r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function(state){\r\n    return {shouldShowForm : state.shouldShowForm}\r\n}\r\nexport default connect(mapStateToProps,actioncreators)(Form);","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from './redux/actioncreators';\r\n\r\nclass Filter extends Component {\r\n    render() {\r\n        const filterMode = this.props.filterMode;\r\n        return (\r\n        <div>\r\n            <select  \r\n                className=\"word\"\r\n                value={filterMode}\r\n                onChange={evt => this.props.set_filter_mode( evt.target.value)}\r\n            >\r\n                <option value=\"Show_All\">Show_All</option>\r\n                <option value=\"Show_Forgot\">Show_Forgot</option>\r\n                <option value=\"Show_Memorized\">Show_Memorized</option>\r\n            </select>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = function(state){\r\n    return {filterMode : state.filterMode}\r\n}\r\nexport default connect(mapStateToProps,actioncreators)(Filter);\r\n","import React, { Component } from 'react';\r\nimport Word from './Word';\r\nimport Form from './Form';\r\nimport Filter from './Filter';\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from './redux/actioncreators'\r\nclass List extends Component {\r\n    componentWillMount(){\r\n        // Neu dung tu android truy vao localhost thong qua ipv4 : http://10.0.0.105:4000/words\r\n        this.props.getAllWord();\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <Form />\r\n            <br/>\r\n            <Filter />            \r\n            {this.props.words.filter(w => {\r\n                if(this.props.filterMode === 'Show_Forgot' && !w.isMemorized) return false;\r\n                if(this.props.filterMode === 'Show_Memorized' && w.isMemorized) return false;\r\n                return true;\r\n                \r\n            }).map(word => \r\n            <Word \r\n                word={word} \r\n                key={word._id}/>)}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToprops = function(state){\r\n    return {words : state.words , filterMode : state.filterMode}\r\n}\r\nexport default connect(mapStateToprops,actioncreators)(List);\r\n\r\n\r\n","import { createStore , combineReducers , applyMiddleware} from 'redux'\r\nimport {wordsReducer} from './reducer/wordReducer'\r\nimport {shouldShowFormReducer} from './reducer/shouldshowformRedcer'\r\nimport {filterModeReducer} from './reducer/filtermodeReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst reducer = combineReducers({\r\n    words : wordsReducer,\r\n    shouldShowForm : shouldShowFormReducer,\r\n    filterMode : filterModeReducer\r\n})\r\n\r\n//https://github.com/reduxjs/redux-thunk\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","\r\nexport function wordsReducer(state = [] , action){\r\n    if(action.type === \"SET_ALL_WORDS\") return action.words;\r\n    if(action.type === \"REMOVE_WORD\"){\r\n        const newWords = state.filter(w => w._id !== action._id);\r\n        return newWords;\r\n    }\r\n    if(action.type === 'TOGGLE_WORD'){\r\n        const newWords = state.map(w =>{\r\n            if(w._id !== action._id) return w;\r\n            return {...w, isMemorized : !w.isMemorized}\r\n        });\r\n        return newWords;\r\n    }\r\n    if(action.type === 'ADD_WORD'){\r\n        let newWords = Object.assign([] , state);\r\n        newWords.unshift(action.word);\r\n        return newWords;\r\n    }\r\n    return state;\r\n}\r\n","export function shouldShowFormReducer(state = false , action){\r\n    if(action.type === 'ADD_WORD') return false;\r\n    if(action.type === 'TOGGLE_FORM') return !state\r\n    return state;\r\n}","export function filterModeReducer(state = 'Show_ALL' , action){\r\n    if(action.type === 'SET_FILTER_MODE') return action.filterMode\r\n    return state;\r\n}","import React, { Component } from 'react';\nimport './App.css';\n// import Box from './components/Box';\nimport List from './components/List';\nimport store from './components/redux/store';\nimport {Provider} from 'react-redux';\n\n\n\n//https://bit.ly/2Gd8oHq\n\n// 1 : Định nghĩa ra store =>\n// state :  giá trị state đưa vào store chính dữ liệu sẽ truyền qua components\n// action : \n    // + tín hiệu : type (Nhìn vào tín hiệu để thay đổi store)\n    // + tham số truyền vào (action.tenthuoctinh) : giá trị này sẽ được nằm trong action\n// mặc đinh phải return về state\n\n//2 : Truyền store vào trong components (sử dụng Provider)\n// 3 : Kết nối với components thông connect\n// 4 : Thay đổi store thông qua dispatch\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <List/>\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}